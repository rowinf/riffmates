"""
This type stub file was generated by pyright.
"""

from django.forms import Form
from django.views.generic.base import ContextMixin, TemplateResponseMixin, View
from django.views.generic.detail import BaseDetailView, SingleObjectMixin, SingleObjectTemplateResponseMixin

class FormMixin(ContextMixin):
    """Provide a way to show and handle a form in a request."""
    initial = ...
    form_class = ...
    success_url = ...
    prefix = ...
    def get_initial(self): # -> dict[Any, Any]:
        """Return the initial data to use for forms on this view."""
        ...
    
    def get_prefix(self): # -> None:
        """Return the prefix to use for forms."""
        ...
    
    def get_form_class(self): # -> None:
        """Return the form class to use."""
        ...
    
    def get_form(self, form_class=...):
        """Return an instance of the form to be used in this view."""
        ...
    
    def get_form_kwargs(self): # -> dict[str, Any]:
        """Return the keyword arguments for instantiating the form."""
        ...
    
    def get_success_url(self): # -> str:
        """Return the URL to redirect to after processing a valid form."""
        ...
    
    def form_valid(self, form): # -> HttpResponseRedirect:
        """If the form is valid, redirect to the supplied URL."""
        ...
    
    def form_invalid(self, form):
        """If the form is invalid, render the invalid form."""
        ...
    
    def get_context_data(self, **kwargs): # -> dict[str, Any]:
        """Insert the form into the context dict."""
        ...
    


class ModelFormMixin(FormMixin, SingleObjectMixin):
    """Provide a way to show and handle a ModelForm in a request."""
    fields = ...
    def get_form_class(self): # -> type[ModelForm]:
        """Return the form class to use in this view."""
        ...
    
    def get_form_kwargs(self): # -> dict[str, Any]:
        """Return the keyword arguments for instantiating the form."""
        ...
    
    def get_success_url(self):
        """Return the URL to redirect to after processing a valid form."""
        ...
    
    def form_valid(self, form): # -> HttpResponseRedirect:
        """If the form is valid, save the associated model."""
        ...
    


class ProcessFormView(View):
    """Render a form on GET and processes it on POST."""
    def get(self, request, *args, **kwargs):
        """Handle GET requests: instantiate a blank version of the form."""
        ...
    
    def post(self, request, *args, **kwargs):
        """
        Handle POST requests: instantiate a form instance with the passed
        POST variables and then check if it's valid.
        """
        ...
    
    def put(self, *args, **kwargs):
        ...
    


class BaseFormView(FormMixin, ProcessFormView):
    """A base view for displaying a form."""
    ...


class FormView(TemplateResponseMixin, BaseFormView):
    """A view for displaying a form and rendering a template response."""
    ...


class BaseCreateView(ModelFormMixin, ProcessFormView):
    """
    Base view for creating a new object instance.

    Using this base class requires subclassing to provide a response mixin.
    """
    def get(self, request, *args, **kwargs):
        ...
    
    def post(self, request, *args, **kwargs):
        ...
    


class CreateView(SingleObjectTemplateResponseMixin, BaseCreateView):
    """
    View for creating a new object, with a response rendered by a template.
    """
    template_name_suffix = ...


class BaseUpdateView(ModelFormMixin, ProcessFormView):
    """
    Base view for updating an existing object.

    Using this base class requires subclassing to provide a response mixin.
    """
    def get(self, request, *args, **kwargs):
        ...
    
    def post(self, request, *args, **kwargs):
        ...
    


class UpdateView(SingleObjectTemplateResponseMixin, BaseUpdateView):
    """View for updating an object, with a response rendered by a template."""
    template_name_suffix = ...


class DeletionMixin:
    """Provide the ability to delete objects."""
    success_url = ...
    def delete(self, request, *args, **kwargs):
        """
        Call the delete() method on the fetched object and then redirect to the
        success URL.
        """
        ...
    
    def post(self, request, *args, **kwargs):
        ...
    
    def get_success_url(self):
        ...
    


class DeleteViewCustomDeleteWarning(Warning):
    ...


class BaseDeleteView(DeletionMixin, FormMixin, BaseDetailView):
    """
    Base view for deleting an object.

    Using this base class requires subclassing to provide a response mixin.
    """
    form_class = Form
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def post(self, request, *args, **kwargs):
        ...
    
    def form_valid(self, form):
        ...
    


class DeleteView(SingleObjectTemplateResponseMixin, BaseDeleteView):
    """
    View for deleting an object retrieved with self.get_object(), with a
    response rendered by a template.
    """
    template_name_suffix = ...


