"""
This type stub file was generated by pyright.
"""

import inspect
import re
from django.apps import apps as django_apps
from django.conf import settings
from django.core.exceptions import ImproperlyConfigured, PermissionDenied
from django.middleware.csrf import rotate_token
from django.utils.crypto import constant_time_compare
from django.utils.module_loading import import_string
from django.views.decorators.debug import sensitive_variables
from .signals import user_logged_in, user_logged_out, user_login_failed

SESSION_KEY = ...
BACKEND_SESSION_KEY = ...
HASH_SESSION_KEY = ...
REDIRECT_FIELD_NAME = ...
def load_backend(path): # -> Any:
    ...

def get_backends(): # -> list[Any]:
    ...

@sensitive_variables("credentials")
def authenticate(request=..., **credentials): # -> None:
    """
    If the given credentials are valid, return a User object.
    """
    ...

def login(request, user, backend=...): # -> None:
    """
    Persist a user id and a backend in the request. This way a user doesn't
    have to reauthenticate on every request. Note that data set during
    the anonymous session is retained when the user logs in.
    """
    ...

def logout(request): # -> None:
    """
    Remove the authenticated user's ID from the request and flush their session
    data.
    """
    ...

def get_user_model():
    """
    Return the User model that is active in this project.
    """
    ...

def get_user(request): # -> Any | AnonymousUser:
    """
    Return the user model instance associated with the given request session.
    If no user is retrieved, return an instance of `AnonymousUser`.
    """
    ...

def get_permission_codename(action, opts): # -> LiteralString:
    """
    Return the codename of the permission for the specified action.
    """
    ...

def update_session_auth_hash(request, user): # -> None:
    """
    Updating a user's password logs out all sessions for the user.

    Take the current request and the updated user object from which the new
    session hash will be derived and update the session hash appropriately to
    prevent a password change from logging out the session from which the
    password was changed.
    """
    ...

