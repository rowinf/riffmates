"""
This type stub file was generated by pyright.
"""

from django.contrib.auth.base_user import AbstractBaseUser, BaseUserManager
from django.db import models

def update_last_login(sender, user, **kwargs): # -> None:
    """
    A signal receiver which updates the last_login date for
    the user logging in.
    """
    ...

class PermissionManager(models.Manager):
    use_in_migrations = ...
    def get_by_natural_key(self, codename, app_label, model): # -> Any:
        ...
    


class Permission(models.Model):
    """
    The permissions system provides a way to assign permissions to specific
    users and groups of users.

    The permission system is used by the Django admin site, but may also be
    useful in your own code. The Django admin site uses permissions as follows:

        - The "add" permission limits the user's ability to view the "add" form
          and add an object.
        - The "change" permission limits a user's ability to view the change
          list, view the "change" form and change an object.
        - The "delete" permission limits the ability to delete an object.
        - The "view" permission limits the ability to view an object.

    Permissions are set globally per type of object, not per specific object
    instance. It is possible to say "Mary may change news stories," but it's
    not currently possible to say "Mary may change news stories, but only the
    ones she created herself" or "Mary may only change news stories that have a
    certain status or publication date."

    The permissions listed above are automatically created for each model.
    """
    name = ...
    content_type = ...
    codename = ...
    objects = ...
    class Meta:
        verbose_name = ...
        verbose_name_plural = ...
        unique_together = ...
        ordering = ...
    
    
    def __str__(self) -> str:
        ...
    
    def natural_key(self):
        ...
    


class GroupManager(models.Manager):
    """
    The manager for the auth's Group model.
    """
    use_in_migrations = ...
    def get_by_natural_key(self, name): # -> Any:
        ...
    


class Group(models.Model):
    """
    Groups are a generic way of categorizing users to apply permissions, or
    some other label, to those users. A user can belong to any number of
    groups.

    A user in a group automatically has all the permissions granted to that
    group. For example, if the group 'Site editors' has the permission
    can_edit_home_page, any user in that group will have that permission.

    Beyond permissions, groups are a convenient way to categorize users to
    apply some label, or extended functionality, to them. For example, you
    could create a group 'Special users', and you could write code that would
    do special things to those users -- such as giving them access to a
    members-only portion of your site, or sending them members-only email
    messages.
    """
    name = ...
    permissions = ...
    objects = ...
    class Meta:
        verbose_name = ...
        verbose_name_plural = ...
    
    
    def __str__(self) -> str:
        ...
    
    def natural_key(self): # -> tuple[CharField]:
        ...
    


class UserManager(BaseUserManager):
    use_in_migrations = ...
    def create_user(self, username, email=..., password=..., **extra_fields): # -> Any:
        ...
    
    def create_superuser(self, username, email=..., password=..., **extra_fields): # -> Any:
        ...
    
    def with_perm(self, perm, is_active=..., include_superusers=..., backend=..., obj=...): # -> Any:
        ...
    


class PermissionsMixin(models.Model):
    """
    Add the fields and methods necessary to support the Group and Permission
    models using the ModelBackend.
    """
    is_superuser = ...
    groups = ...
    user_permissions = ...
    class Meta:
        abstract = ...
    
    
    def get_user_permissions(self, obj=...): # -> set[Any]:
        """
        Return a list of permission strings that this user has directly.
        Query all available auth backends. If an object is passed in,
        return only permissions matching this object.
        """
        ...
    
    def get_group_permissions(self, obj=...): # -> set[Any]:
        """
        Return a list of permission strings that this user has through their
        groups. Query all available auth backends. If an object is passed in,
        return only permissions matching this object.
        """
        ...
    
    def get_all_permissions(self, obj=...): # -> set[Any]:
        ...
    
    def has_perm(self, perm, obj=...): # -> bool:
        """
        Return True if the user has the specified permission. Query all
        available auth backends, but return immediately if any backend returns
        True. Thus, a user who has permission from a single auth backend is
        assumed to have permission in general. If an object is provided, check
        permissions for that object.
        """
        ...
    
    def has_perms(self, perm_list, obj=...): # -> bool:
        """
        Return True if the user has each of the specified permissions. If
        object is passed, check if the user has all required perms for it.
        """
        ...
    
    def has_module_perms(self, app_label): # -> bool:
        """
        Return True if the user has any permissions in the given app label.
        Use similar logic as has_perm(), above.
        """
        ...
    


class AbstractUser(AbstractBaseUser, PermissionsMixin):
    """
    An abstract base class implementing a fully featured User model with
    admin-compliant permissions.

    Username and password are required. Other fields are optional.
    """
    username_validator = ...
    username = ...
    first_name = ...
    last_name = ...
    email = ...
    is_staff = ...
    is_active = ...
    date_joined = ...
    objects = ...
    EMAIL_FIELD = ...
    USERNAME_FIELD = ...
    REQUIRED_FIELDS = ...
    class Meta:
        verbose_name = ...
        verbose_name_plural = ...
        abstract = ...
    
    
    def clean(self): # -> None:
        ...
    
    def get_full_name(self): # -> str:
        """
        Return the first_name plus the last_name, with a space in between.
        """
        ...
    
    def get_short_name(self): # -> CharField:
        """Return the short name for the user."""
        ...
    
    def email_user(self, subject, message, from_email=..., **kwargs): # -> None:
        """Send an email to this user."""
        ...
    


class User(AbstractUser):
    """
    Users within the Django authentication system are represented by this
    model.

    Username and password are required. Other fields are optional.
    """
    class Meta(AbstractUser.Meta):
        swappable = ...
    
    


class AnonymousUser:
    id = ...
    pk = ...
    username = ...
    is_staff = ...
    is_active = ...
    is_superuser = ...
    _groups = ...
    _user_permissions = ...
    def __str__(self) -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __int__(self) -> int:
        ...
    
    def save(self):
        ...
    
    def delete(self):
        ...
    
    def set_password(self, raw_password):
        ...
    
    def check_password(self, raw_password):
        ...
    
    @property
    def groups(self): # -> Any:
        ...
    
    @property
    def user_permissions(self): # -> Any:
        ...
    
    def get_user_permissions(self, obj=...): # -> set[Any]:
        ...
    
    def get_group_permissions(self, obj=...): # -> set[Any]:
        ...
    
    def get_all_permissions(self, obj=...): # -> set[Any]:
        ...
    
    def has_perm(self, perm, obj=...): # -> bool:
        ...
    
    def has_perms(self, perm_list, obj=...): # -> bool:
        ...
    
    def has_module_perms(self, module): # -> bool:
        ...
    
    @property
    def is_anonymous(self): # -> Literal[True]:
        ...
    
    @property
    def is_authenticated(self): # -> Literal[False]:
        ...
    
    def get_username(self): # -> str:
        ...
    


