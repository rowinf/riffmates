"""
This type stub file was generated by pyright.
"""

def convert_exception_to_response(get_response): # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Coroutine[Any, Any, Any | HttpResponse | HttpResponseNotFound | object]] | _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any | HttpResponse | HttpResponseNotFound | object]:
    """
    Wrap the given get_response callable in exception-to-response conversion.

    All exceptions will be converted. All known 4xx exceptions (Http404,
    PermissionDenied, MultiPartParserError, SuspiciousOperation) will be
    converted to the appropriate response, and all other exceptions will be
    converted to 500 responses.

    This decorator is automatically applied to all middleware to ensure that
    no middleware leaks an exception and that the next middleware in the stack
    can rely on getting a response instead of an exception.
    """
    ...

def response_for_exception(request, exc): # -> HttpResponse | HttpResponseNotFound | object:
    ...

def get_exception_response(request, resolver, status_code, exception): # -> HttpResponse:
    ...

def handle_uncaught_exception(request, resolver, exc_info): # -> HttpResponse:
    """
    Processing for any otherwise uncaught exceptions (those that will
    generate HTTP 500 responses).
    """
    ...

