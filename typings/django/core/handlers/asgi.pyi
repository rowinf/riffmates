"""
This type stub file was generated by pyright.
"""

from django.core.handlers import base
from django.http import HttpRequest
from django.utils.functional import cached_property

logger = ...
class ASGIRequest(HttpRequest):
    """
    Custom request subclass that decodes from an ASGI-standard request dict
    and wraps request body handling.
    """
    body_receive_timeout = ...
    def __init__(self, scope, body_file) -> None:
        ...
    
    @cached_property
    def GET(self): # -> QueryDict:
        ...
    
    POST = ...
    FILES = ...
    @cached_property
    def COOKIES(self): # -> dict[Any, Any]:
        ...
    
    def close(self): # -> None:
        ...
    


class ASGIHandler(base.BaseHandler):
    """Handler for ASGI requests."""
    request_class = ASGIRequest
    chunk_size = ...
    def __init__(self) -> None:
        ...
    
    async def __call__(self, scope, receive, send): # -> None:
        """
        Async entrypoint - parses the request and hands off to get_response.
        """
        ...
    
    async def handle(self, scope, receive, send): # -> None:
        """
        Handles the ASGI request. Called via the __call__ method.
        """
        ...
    
    async def read_body(self, receive): # -> SpooledTemporaryFile[bytes]:
        """Reads an HTTP body from an ASGI connection."""
        ...
    
    def create_request(self, scope, body_file): # -> tuple[request_class, None] | tuple[None, HttpResponseBadRequest] | tuple[None, HttpResponse]:
        """
        Create the Request object and returns either (request, None) or
        (None, response) if there is an error response.
        """
        ...
    
    def handle_uncaught_exception(self, request, resolver, exc_info): # -> HttpResponseServerError:
        """Last-chance handler for exceptions."""
        ...
    
    async def send_response(self, response, send): # -> None:
        """Encode and send a response out over ASGI."""
        ...
    
    @classmethod
    def chunk_bytes(cls, data): # -> Generator[tuple[Any, Literal[True]] | tuple[Any, bool], Any, None]:
        """
        Chunks some data up so it can be sent in reasonable size messages.
        Yields (chunk, last_chunk) tuples.
        """
        ...
    
    def get_script_prefix(self, scope): # -> Any | Literal['']:
        """
        Return the script prefix to use from either the scope or a setting.
        """
        ...
    


