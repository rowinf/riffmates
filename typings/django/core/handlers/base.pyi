"""
This type stub file was generated by pyright.
"""

logger = ...
class BaseHandler:
    _view_middleware = ...
    _template_response_middleware = ...
    _exception_middleware = ...
    _middleware_chain = ...
    def load_middleware(self, is_async=...): # -> None:
        """
        Populate middleware lists from settings.MIDDLEWARE.

        Must be called after the environment is fixed (see __call__ in subclasses).
        """
        ...
    
    def adapt_method_mode(self, is_async, method, method_is_async=..., debug=..., name=...): # -> Callable[..., Coroutine[Any, Any, Any]] | Callable[..., Any]:
        """
        Adapt a method to be in the correct "mode":
        - If is_async is False:
          - Synchronous methods are left alone
          - Asynchronous methods are wrapped with async_to_sync
        - If is_async is True:
          - Synchronous methods are wrapped with sync_to_async()
          - Asynchronous methods are left alone
        """
        ...
    
    def get_response(self, request): # -> Coroutine[Any, Any, Any]:
        """Return an HttpResponse object for the given HttpRequest."""
        ...
    
    async def get_response_async(self, request):
        """
        Asynchronous version of get_response.

        Funneling everything, including WSGI, into a single async
        get_response() is too slow. Avoid the context switch by using
        a separate async response path.
        """
        ...
    
    def resolve_request(self, request): # -> ResolverMatch:
        """
        Retrieve/set the urlconf for the request. Return the view resolved,
        with its args and kwargs.
        """
        ...
    
    def check_response(self, response, callback, name=...): # -> None:
        """
        Raise an error if the view returned None or an uncalled coroutine.
        """
        ...
    
    def make_view_atomic(self, view): # -> object:
        ...
    
    def process_exception_by_middleware(self, exception, request): # -> None:
        """
        Pass the exception to the exception middleware. If no middleware
        return a response for this exception, return None.
        """
        ...
    


def reset_urlconf(sender, **kwargs): # -> None:
    """Reset the URLconf after each request is finished."""
    ...

