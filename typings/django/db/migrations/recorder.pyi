"""
This type stub file was generated by pyright.
"""

from django.utils.functional import classproperty

class MigrationRecorder:
    """
    Deal with storing migration records in the database.

    Because this table is actually itself used for dealing with model
    creation, it's the one thing we can't do normally via migrations.
    We manually handle table creation/schema updating (using schema backend)
    and then have a floating model to do queries with.

    If a migration is unapplied its row is removed from the table. Having
    a row in the table always means a migration is applied.
    """
    _migration_class = ...
    @classproperty
    def Migration(cls): # -> type[Migration]:
        """
        Lazy load to avoid AppRegistryNotReady if installed apps import
        MigrationRecorder.
        """
        ...
    
    def __init__(self, connection) -> None:
        ...
    
    @property
    def migration_qs(self):
        ...
    
    def has_table(self): # -> bool:
        """Return True if the django_migrations table exists."""
        ...
    
    def ensure_schema(self): # -> None:
        """Ensure the table exists and has the correct schema."""
        ...
    
    def applied_migrations(self): # -> dict[tuple[Any, Any], Any] | dict[Any, Any]:
        """
        Return a dict mapping (app_name, migration_name) to Migration instances
        for all applied migrations.
        """
        ...
    
    def record_applied(self, app, name): # -> None:
        """Record that a migration was applied."""
        ...
    
    def record_unapplied(self, app, name): # -> None:
        """Record that a migration was unapplied."""
        ...
    
    def flush(self): # -> None:
        """Delete all migration records. Useful for testing migrations."""
        ...
    


