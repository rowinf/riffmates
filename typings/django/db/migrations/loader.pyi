"""
This type stub file was generated by pyright.
"""

MIGRATIONS_MODULE_NAME = ...
class MigrationLoader:
    """
    Load migration files from disk and their status from the database.

    Migration files are expected to live in the "migrations" directory of
    an app. Their names are entirely unimportant from a code perspective,
    but will probably follow the 1234_name.py convention.

    On initialization, this class will scan those directories, and open and
    read the Python files, looking for a class called Migration, which should
    inherit from django.db.migrations.Migration. See
    django.db.migrations.migration for what that looks like.

    Some migrations will be marked as "replacing" another set of migrations.
    These are loaded into a separate set of migrations away from the main ones.
    If all the migrations they replace are either unapplied or missing from
    disk, then they are injected into the main set, replacing the named migrations.
    Any dependency pointers to the replaced migrations are re-pointed to the
    new migration.

    This does mean that this class MUST also talk to the database as well as
    to disk, but this is probably fine. We're already not just operating
    in memory.
    """
    def __init__(self, connection, load=..., ignore_no_migrations=..., replace_migrations=...) -> None:
        ...
    
    @classmethod
    def migrations_module(cls, app_label): # -> tuple[Any, Literal[True]] | tuple[str, Literal[False]]:
        """
        Return the path to the migrations module for the specified app_label
        and a boolean indicating if the module is specified in
        settings.MIGRATION_MODULE.
        """
        ...
    
    def load_disk(self): # -> None:
        """Load the migrations from all INSTALLED_APPS from disk."""
        ...
    
    def get_migration(self, app_label, name_prefix):
        """Return the named migration or raise NodeNotFoundError."""
        ...
    
    def get_migration_by_prefix(self, app_label, name_prefix):
        """
        Return the migration(s) which match the given app label and name_prefix.
        """
        ...
    
    def check_key(self, key, current_app): # -> None:
        ...
    
    def add_internal_dependencies(self, key, migration): # -> None:
        """
        Internal dependencies need to be added first to ensure `__first__`
        dependencies find the correct root node.
        """
        ...
    
    def add_external_dependencies(self, key, migration): # -> None:
        ...
    
    def build_graph(self): # -> None:
        """
        Build a migration dependency graph using both the disk and database.
        You'll need to rebuild the graph if you apply migrations. This isn't
        usually a problem as generally migration stuff runs in a one-shot process.
        """
        ...
    
    def check_consistent_history(self, connection): # -> None:
        """
        Raise InconsistentMigrationHistory if any applied migrations have
        unapplied dependencies.
        """
        ...
    
    def detect_conflicts(self): # -> dict[Any, list[Any]]:
        """
        Look through the loaded graph and detect any conflicts - apps
        with more than one leaf migration. Return a dict of the app labels
        that conflict with the migration names that conflict.
        """
        ...
    
    def project_state(self, nodes=..., at_end=...): # -> ProjectState:
        """
        Return a ProjectState object representing the most recent state
        that the loaded migrations represent.

        See graph.make_state() for the meaning of "nodes" and "at_end".
        """
        ...
    
    def collect_sql(self, plan): # -> list[Any]:
        """
        Take a migration plan and return a list of collected SQL statements
        that represent the best-efforts version of that plan.
        """
        ...
    


